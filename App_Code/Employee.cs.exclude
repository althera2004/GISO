using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Text;
using System.Collections.ObjectModel;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;

/// <summary>
/// Summary description for Employee
/// </summary>
public class Employee
{
    public int Id { get; set; }
    public int CompanyId { get; set; }
    public string Name { get; set; }
    public string LastName { get; set; }
    public string SecondLastName { get; set; }
    public string Email { get; set; }
    public string Phone { get; set; }
    public int UserId { get; set; }
    public List<Department> Deparments { get; set; }
    public ApplicationUser User { get; set; }

    public static Employee Empty
    {
        get
        {
            return new Employee();
        }
    }

    public string FullName
    {
        get
        {
            string res = string.Empty;
            if (!string.IsNullOrEmpty(this.LastName))
            {
                res = this.LastName;
            }

            if (!string.IsNullOrEmpty(this.SecondLastName))
            {
                if (!string.IsNullOrEmpty(res))
                {
                    res += " ";
                }

                res += this.SecondLastName;
            }

            if (!string.IsNullOrEmpty(this.Name))
            {
                if (!string.IsNullOrEmpty(res))
                {
                    res += ", ";
                }

                res += this.Name;
            }

            return res;
        }
    }

    public Employee()
    {
        this.Initialize(0, 0, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty);
    }

    public Employee(int employeeId)
    {
        this.Deparments = new List<Department>();
        SqlConnection cnn = new SqlConnection(ConfigurationManager.ConnectionStrings["cns"].ConnectionString);
        SqlCommand cmd = new SqlCommand("Employee_GetById", cnn);
        try
        {
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("@EmployeeId", SqlDbType.Int);
            cmd.Parameters["@EmployeeId"].Value = employeeId;
            cnn.Open();
            SqlDataReader rdr = cmd.ExecuteReader();
            bool first = true;
            while (rdr.Read())
            {
                if (first)
                {
                    first = false;
                    this.Id = rdr.GetInt32(0);
                    this.Name = rdr.GetString(1);
                    this.LastName = rdr.GetString(2);
                    this.SecondLastName = rdr.GetString(3);
                    this.Email = rdr.GetString(4);
                    this.Phone = rdr.GetString(5);
                    int userId = rdr.GetInt32(7);

                    if (userId != 0)
                    {
                        this.User = new ApplicationUser(userId);
                    }
                }

                int deparmentId = rdr.GetInt32(6);
                if (deparmentId != 0)
                {
                    Department department = new Department(deparmentId, this.CompanyId);
                    if (department != null)
                    {
                        this.Deparments.Add(department);
                    }
                }
            }
        }
        catch(Exception ex)
        {
        }
        finally
        {
            if(cnn.State!= ConnectionState.Closed)
            {
                cnn.Close();
            }

            cnn.Dispose();
            cmd.Dispose();
        }
    }

    public ReadOnlyCollection<Employee> GetBy_Company(int companyId)
    {
        List<Employee> res = new List<Employee>();
        SqlConnection cnn = new SqlConnection(ConfigurationManager.ConnectionStrings["cns"].ConnectionString);
        SqlCommand cmd = new SqlCommand("GetLogin", cnn);
        return new ReadOnlyCollection<Employee>(res);
    }

    public static string ToJson(Employee employee)
    {
        StringBuilder res = new StringBuilder("{");
        res.Append("Id:").Append(employee.Id).Append(",");
        res.Append("CompanyId:").Append(employee.CompanyId).Append(",");
        res.Append("Name:'").Append(employee.Name).Append("',");
        res.Append("Email:'").Append(employee.Email).Append("',");
        res.Append("UserId:").Append(employee.UserId).Append("}");
        return res.ToString();
    }

    private void Initialize(int id, int companyId, string name,string lastName,string secondLastName,  string email, string phone)
    {
        this.Id = id;
        this.CompanyId = companyId;
        this.Name = name;
        this.LastName = lastName;
        this.SecondLastName = secondLastName;
        this.Email = email;
        this.Phone = phone;
        this.Deparments = new List<Department>();
        this.User = new ApplicationUser();
    }

    public string ToJson()
    {
        StringBuilder res = new StringBuilder();
        res.Append("{");
        res.Append("\"Id\":").Append(this.Id).Append(",");
        res.Append("\"Name\":\"").Append(this.Name).Append("\",");
        res.Append("\"LastName\":\"").Append(this.LastName).Append("\",");
        res.Append("\"SecondLastName\":\"").Append(this.SecondLastName).Append("\",");
        res.Append("\"Email\":\"").Append(this.Email).Append("\",");
        res.Append("\"Phone\":\"").Append(this.Phone).Append("\",");
        res.Append("\"Deparments\":[");
        bool first = true;
        foreach (Department department in this.Deparments)
        {
            if (first)
            {
                first = false;
            }
            else
            {
                res.Append(",");
            }

            res.Append(department.Id);
        }
        res.Append("]");
        if (this.User != null)
        {
            if (this.User.Id > 0)
            {
                res.Append(",\"User\":").Append(this.User.ToJson());
            }
        }
        res.Append("}");
        return res.ToString();
    }

    public string GetEmployeeRow()
    {
        string departments = string.Empty;
        bool first = true;

        string cargo = string.Empty;

        switch (this.Id)
        {
            case 1: cargo = "Matenimiento eléctrico"; break;
            case 2: cargo = "Recursos humanos"; break;
            case 3: cargo = "Redactor de material"; break;
            case 4: cargo = "Financiaro/contable"; break;
        }

        foreach (Department deparment in this.Deparments)
        {
            if (first)
            {
                first = false;
            }
            else
            {
                departments += ", ";
            }

            departments += string.Format("<a href=\"DepartmentView.aspx?id{0} alt=\"{1}\">{1}</a>", deparment.Id, deparment.Name);
        }

        return string.Format(@"<tr>
																<td><a href=""EmployeesView.aspx?id={0}"">{1}</a></td>
																<td><a href=""#"">{5}</a></td>
																<td class=""hidden-480"">{2}</td>
																<td>{3}</td>
																<td class=""hidden-480"">{4}</td>
															</tr>", this.Id, this.FullName, departments, this.Email, this.Phone, cargo);

        
    }

    public string ProfileViewLink
    {
        get
        {
            return string.Format("<a href=\"{0}\" title=\"{2} {1}\">{1}</a>", this.Id, this.FullName, ((Dictionary<string, string>)HttpContext.Current.Session["Dictionary"])["Ver perfil de"]);
        }
    }
}