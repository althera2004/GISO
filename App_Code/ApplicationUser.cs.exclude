using System.Text;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Collections.ObjectModel;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using GisoFramework.UserInterface;

/// <summary>
/// Summary description for ApplicationUser
/// </summary>
public class ApplicationUser
{
    public enum UserGrant
    {
        Undefined = 0,
        CompanyData = 1,
        Departments = 2,
        Employees = 3,
        Documents = 4,
        Providers = 5
    }

    public class MenuShorcuts
    {
        private Shortcut green;
        private Shortcut yellow;
        private Shortcut blue;
        private Shortcut red;

        public Shortcut Green
        {
            get
            {
                return this.green;
            }

            set
            {
                this.green = value;
            }
        }
        public Shortcut Yellow
        {
            get
            {
                return this.yellow;
            }

            set
            {
                this.yellow = value;
            }
        }
        public Shortcut Blue
        {
            get
            {
                return this.blue;
            }

            set
            {
                this.blue = value;
            }
        }
        public Shortcut Red
        {
            get
            {
                return this.red;
            }

            set
            {
                this.red = value;
            }
        }
    }

    public int Id { get; set; }
    public string Login { get; set; }
    public string Name { get; set; }
    public List<ApplicationLogin.SecurityGroup> Groups { get; set; }
    public string Language { get; set; }
    public ApplicationLogin.LoginResult Status { get; set; }
    public Employee Employee { get; set; }
    public MenuShorcuts MenuShortCuts { get; set; }

    public static ApplicationUser Empty
    {
        get
        {
            return new ApplicationUser()
            {
                Id = -1,
                Name = string.Empty,
                Login = string.Empty
            };
        }
    }

	public ApplicationUser()
	{
        this.Id = -1;
        this.Login = string.Empty;
        this.Name = string.Empty;
        this.Groups = new List<ApplicationLogin.SecurityGroup>();
    }

    public ApplicationUser(int userId)
    {
        SqlConnection cnn = new SqlConnection(ConfigurationManager.ConnectionStrings["cns"].ConnectionString);
        SqlCommand cmd = new SqlCommand("User_GetById", cnn);
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.Parameters.Add("@UserId", SqlDbType.Int);
        cmd.Parameters["@UserId"].Value = userId;

        this.Id = -1;
        this.Name = string.Empty;
        this.Login = string.Empty;

        try
        {
            cnn.Open();
            SqlDataReader rdr = cmd.ExecuteReader();
            bool first = true;
            while(rdr.Read())
            {
                if (first)
                {
                    first = false;
                    this.Groups = new List<ApplicationLogin.SecurityGroup>();
                    this.Id = rdr.GetInt32(0);
                    this.Login = rdr.GetString(1);
                    this.Status = ApplicationLogin.IntegerToLoginResult(rdr.GetInt32(2));
                    this.Language = rdr.GetString(3);
                    this.Employee = new Employee()
                    {
                        Name = rdr.GetString(5),
                        LastName = rdr.GetString(6),
                        SecondLastName = rdr.GetString(7)
                    };

                    this.MenuShortCuts = new MenuShorcuts();

                    if (!string.IsNullOrEmpty(rdr.GetString(8)))
                    {
                        this.MenuShortCuts.Green = new Shortcut() { Label = rdr.GetString(8), Icon = rdr.GetString(9), Link = rdr.GetString(10) };
                    }

                    if (!string.IsNullOrEmpty(rdr.GetString(11)))
                    {
                        this.MenuShortCuts.Blue = new Shortcut() { Label = rdr.GetString(11), Icon = rdr.GetString(12), Link = rdr.GetString(13) };
                    }

                    if (!string.IsNullOrEmpty(rdr.GetString(14)))
                    {
                        this.MenuShortCuts.Red = new Shortcut() { Label = rdr.GetString(14), Icon = rdr.GetString(15), Link = rdr.GetString(16) };
                    }

                    if (!string.IsNullOrEmpty(rdr.GetString(17)))
                    {
                        this.MenuShortCuts.Yellow = new Shortcut() { Label = rdr.GetString(17), Icon = rdr.GetString(18), Link = rdr.GetString(19) };
                    }

                }

                this.Groups.Add(ApplicationLogin.IntegerToSecurityGroup(rdr.GetInt32(4)));
            }
        }
        catch (Exception ex)
        {
        }
        finally
        {
            if (cnn.State != ConnectionState.Closed)
            {
                cnn.Close();
            }

            cnn.Dispose();
            cmd.Dispose();
        }
    }

    public static UserGrant IntegerToGrant(int value)
    {
        UserGrant res = UserGrant.Undefined;
        switch (value)
        {
            case 1:
                res = UserGrant.CompanyData;
                break;
            case 2:
                res = UserGrant.Departments;
                break;
            case 3:
                res = UserGrant.Employees;
                break;
            case 4:
                res = UserGrant.Documents;
                break;
            case 5:
                res = UserGrant.Providers;
                break;
        }

        return res;
    }

    public static string GrantToText(ApplicationLogin.SecurityGroup group)
    {
        string res = string.Empty;
        switch (group)
        {
            case ApplicationLogin.SecurityGroup.Company:
                res = "Datos de la compañía";
                break;
            case ApplicationLogin.SecurityGroup.Indicadores:
                res = "Indicadores";
                break;
            case ApplicationLogin.SecurityGroup.Documentos:
                res = "Documentos";
                break;
            case ApplicationLogin.SecurityGroup.Formacion:
                res = "Formación";
                break;
            case ApplicationLogin.SecurityGroup.Proveedores:
                res = "Proveedores";
                break;
            case ApplicationLogin.SecurityGroup.Revision:
                res = "Revisión dirección";
                break;
            case ApplicationLogin.SecurityGroup.Equipos:
                res = "Equipos";
                break;
            case ApplicationLogin.SecurityGroup.Auditorias:
                res = "Auditorias";
                break;
            case ApplicationLogin.SecurityGroup.Incidencias:
                res = "Incidencias";
                break;
        }

        return res;
    }

    public string ToJson()
    {
        StringBuilder res = new StringBuilder("{").Append(Environment.NewLine);
        res.Append("\t\t\"Id\":").Append(this.Id).Append(",").Append(Environment.NewLine);
        res.Append("\t\t\"Login\":\"").Append(this.Login).Append("\",").Append(Environment.NewLine);
        res.Append("\t\t\"Language\":\"").Append(this.Language).Append("\",").Append(Environment.NewLine);
        res.Append("\t\t\"Status\":\"").Append(this.Status).Append("\"");
        if (this.Employee != null)
        {
            res.Append(",").Append(Environment.NewLine).Append("\t\tEmploye:{").Append(Environment.NewLine);
            res.Append("\t\t\tName:'").Append(this.Employee.Name).Append("',").Append(Environment.NewLine);
            res.Append("\t\t\tLastName:'").Append(this.Employee.LastName).Append("',").Append(Environment.NewLine);
            res.Append("\t\t\tSecondLastName:'").Append(this.Employee.SecondLastName).Append("',").Append(Environment.NewLine);
            res.Append("\t\t}");
        }
        res.Append(Environment.NewLine).Append("}");
        return res.ToString();
    }

    public string GrantToJson()
    {
        StringBuilder res = new StringBuilder("[");
        bool first = true;
        foreach (ApplicationLogin.SecurityGroup group in this.Groups)
        {
            if (first == true)
            {
                first = false;
            }
            else
            {
                res.Append(",");
            }

            res.Append("{Id:'").Append(group).Append("',Description:'").Append(GrantToText(group)).Append("'}");
        }

        res.Append("]");
        return res.ToString();

    }
}