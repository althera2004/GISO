using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;

/// <summary>
/// Summary description for CompanyAddress
/// </summary>
public class CompanyAddress
{
    public int Id { get; set; }
    public Company Company { get; set; }
    public string Address { get; set; }
    public string PostalCode { get; set; }
    public string City { get; set; }
    public string Province { get; set; }
    public string Country { get; set; }
    public string Phone { get; set; }
    public string Mobile { get; set; }
    public string Fax { get; set; }
    public string Email { get; set; }
    public string Notes { get; set; }
    public bool Default { get; set; }

	public CompanyAddress()
	{
		//
		// TODO: Add constructor logic here
		//
	}

    public static List<CompanyAddress> GetAddressByCompanyId(Company company)
    {
        List<CompanyAddress> res = new List<CompanyAddress>();
        SqlConnection cnn = new SqlConnection(ConfigurationManager.ConnectionStrings["cns"].ConnectionString);
        SqlCommand cmd = new SqlCommand("Company_GetAdress", cnn);
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.Parameters.Add("@CompanyId", SqlDbType.Int);
        cmd.Parameters["@CompanyId"].Value = company.Id;

        try
        {
            cnn.Open();
            SqlDataReader rdr = cmd.ExecuteReader();
            while (rdr.Read())
            {
                res.Add(new CompanyAddress()
                {
                    Id = rdr.GetInt32(0),
                    Company = company,
                    Address = rdr.GetString(2),
                    PostalCode = rdr.GetString(3),
                    City = rdr.GetString(4),
                    Province = rdr.GetString(5),
                    Country = rdr.GetString(6),
                    Phone = rdr.GetString(7),
                    Mobile = rdr.GetString(8),
                    Fax = rdr.GetString(9),
                    Email = rdr.GetString(10),
                    Notes = rdr.GetString(11),
                    Default = rdr.GetInt32(12) == 1
                });
            }
        }
        catch (Exception ex)
        {
        }
        finally
        {
            if (cnn.State != ConnectionState.Closed)
            {
                cnn.Close();
            }

            cnn.Dispose();
            cmd.Dispose();
        }

        return res;
    }

    public string ToJson
    {
        get
        {
            return string.Format("{{Id:{0}, CompanId:{1}, Address:'{2}', PostalCode:'{3}', City:'{4}', Province:'{5}', Country:'{6}', Phone:'{7}', Mobile:'{8}', Fax:'{9}', Email:'{10}'}}", this.Id, this.Company.Id, this.Address.Replace("'", "\\'"), this.PostalCode, this.City.Replace("'", "\\'"), this.Province.Replace("'", "\\'"), this.Country.Replace("'", "\\'"), this.Phone, this.Mobile, this.Fax, this.Email);
        }
    }

    public string SelectOption
    {
        get
        {
            return string.Format("<option value=\"{0}\" {2}>{1}</option>", this.Id, this.Address + ", " + this.City, this.Id == this.Company.DefaultAdress.Id ? "selected=\"selected\"" : string.Empty);
        }
    }
}