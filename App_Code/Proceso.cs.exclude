using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;

/// <summary>
/// Summary description for Proceso
/// </summary>
public class Proceso
{
    public enum TipoProceso
    {
        Indefinido = 0,
        Personal = 1,
        Soporte = 2,
        Estrategico = 3
    }

    public int Id { get; set; }
    public int CompanyId { get; set; }
    public TipoProceso Tipo { get; set; }
    public string Description { get; set; }
    public string Inicio { get; set; }
    public string Desarrollo { get; set; }
    public string Fin { get; set; }
    public Cargo Cargo { get; set; }
    public Employee ModifiedBy { get; set; }
    public DateTime ModifiedOn { get; set; }

	public Proceso()
	{		
	}

    public static string TipoToString(TipoProceso tipo)
    {
        string res = string.Empty;
        switch (tipo)
        {
            case TipoProceso.Estrategico:
                res = "Estratégico";
                break;
            case TipoProceso.Personal:
                res = "Personal";
                break;
            case TipoProceso.Soporte:
                res = "Soporte";
                break;
        }
        return res;
    }

    public static Proceso Empty
    {
        get 
        {
            Proceso res = new Proceso();
            res.ModifiedBy = new Employee() { Id = -1, Name = string.Empty, LastName = string.Empty };
            res.Cargo = new Cargo() { Id = -1, Description = string.Empty };
            return res;
        }
    }

    public static ReadOnlyCollection<Proceso> GetProcesos(int companyId)
    {
        List<Proceso> res = new List<Proceso>();

        /* CREATE PROCEDURE Get_ProcesosById
         * @Id int,
         * @CompanyId int */


        using (SqlCommand cmd = new SqlCommand("Get_Procesos"))
        {
            cmd.Connection = new SqlConnection(ConfigurationManager.ConnectionStrings["cns"].ConnectionString);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("@CompanyId", SqlDbType.Int);
            cmd.Parameters["@CompanyId"].Value = companyId;
            try
            {
                cmd.Connection.Open();
                SqlDataReader rdr = cmd.ExecuteReader();
                while (rdr.Read())
                {
                    res.Add(new Proceso()
                    {
                        Id = rdr.GetInt32(0),
                        CompanyId = companyId,
                        Tipo = (TipoProceso)rdr.GetInt32(2),
                        Inicio = rdr.GetString(3),
                        Desarrollo = rdr.GetString(4),
                        Fin = rdr.GetString(5),
                        Description = rdr.GetString(6),
                        Cargo = new Cargo(Convert.ToInt32(rdr.GetInt64(7)), companyId)
                    });
                }
            }
            finally
            {
                if (cmd.Connection.State != ConnectionState.Closed)
                {
                    cmd.Connection.Close();
                }
            }

            return new ReadOnlyCollection<Proceso>(res);
        }
    }

    public Proceso(int id, int companyId)
    {
        /* CREATE PROCEDURE Get_ProcesosById
         * @Id int,
         * @CompanyId int */

        using (SqlCommand cmd = new SqlCommand("Get_ProcesosById"))
        {
            cmd.Connection = new SqlConnection(ConfigurationManager.ConnectionStrings["cns"].ConnectionString);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("@Id", SqlDbType.Int);
            cmd.Parameters.Add("@CompanyId", SqlDbType.Int);
            cmd.Parameters["@Id"].Value = id;
            cmd.Parameters["@CompanyId"].Value = companyId;
            try
            {
                cmd.Connection.Open();
                SqlDataReader rdr = cmd.ExecuteReader();
                if (rdr.HasRows)
                {
                    rdr.Read();
                    this.Id = id;
                    this.CompanyId = companyId;
                    this.Tipo = (TipoProceso)rdr.GetInt32(2);
                    this.Inicio = rdr.GetString(3);
                    this.Desarrollo = rdr.GetString(4);
                    this.Fin = rdr.GetString(5);
                    this.Cargo = new Cargo(Convert.ToInt32(rdr.GetInt64(7)), companyId);
                    this.ModifiedBy = new Employee(rdr.GetInt32(8));
                    this.ModifiedOn = rdr.GetDateTime(9);
                }
            }
            finally
            {
                if (cmd.Connection.State != ConnectionState.Closed)
                {
                    cmd.Connection.Close();
                }
            }
        }
    }
}